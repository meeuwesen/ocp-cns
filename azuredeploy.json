{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "Base URL for Template Files",
				"artifactsBaseUrl": ""
			},
			"defaultValue": "https://raw.githubusercontent.com/maalbers/ocp-cns/master/"
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_DS4_v2",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
			],
			"metadata": {
				"description": "OpenShift Master Node VM size"
			}
		},
		"infraVmSize": {
			"type": "string",
			"defaultValue": "Standard_DS3_v2",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS2", "Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
			],
			"metadata": {
				"description": "OpenShift Infra Node VM size"
			}
		},
		"nodeVmSize": {
			"type": "string",
			"defaultValue": "Standard_DS2_v2",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
			],
			"metadata": {
				"description": "OpenShift Compute Node VM size"
			}
		},
	                "storageKind": {
                        "type": "string",
                        "defaultValue": "managed",
                        "allowedValues": ["managed", "unmanaged"],
                        "metadata": {
                                "description": "Use Managed or Unmanaged Disks"
                        }
                },
		"openshiftClusterPrefix": {
			"type": "string",
			"defaultValue": "ocp",
			"minLength": 1,
			"maxLength": 5,
			"metadata": {
				"description": "OpenShift cluster prefix.  Used to generate master, infra and node hostnames."
			}
		},
		"openshiftMasterPublicIpDnsLabel": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Master Load Balancer public IP DNS name (hostname portion). Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
			}
		},
		"infraPublicLbPublicIpDnsLabel": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Public Infra Nodes Load Balancer public IP DNS name (hostname portion). Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
			}
		},
		"infraRestrictedLbPublicIpDnsLabel": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Restricted Infra Nodes Load Balancer public IP DNS name (hostname portion). Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
			}
		},
		"masterInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"minValue": 1,
			"allowedValues": [3],
			"metadata": {
				"description": "Number of OpenShift Master Nodes."
			}
		},
		"infraInstanceCount": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"allowedValues": [1, 2, 3, 4, 5],
			"metadata": {
				"description": "Number of OpenShift Infra Nodes."
			}
		},
		"testnodeInstanceCount": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
			"metadata": {
				"description": "Number of OpenShift test environment Compute Nodes."
			}
		},
		"prodnodeInstanceCount": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
			"metadata": {
				"description": "Number of OpenShift production environment Compute Nodes."
			}
		},
		"dataDiskSize": {
			"type": "int",
			"defaultValue": 128,
			"minValue": 1,
			"allowedValues": [128, 512, 1023],
			"metadata": {
				"description": "Size of Datadisk in GB for Docker volume"
			}
		},
		"adminUsername": {
			"type": "string",
			"defaultValue": "ocpadmin",
			"minLength": 1,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for OpenShift login"
			}
		},
		"openshiftPassword": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Password for OpenShift user to login to OpenShift Console"
			}
		},
		"enableAzure": {
			"type": "string",
			"defaultValue": "false",
			"allowedValues": [
				"true", "false"
			],
			"metadata": {
				"description": "Enable Azure as Cloud Provider - true or false"
			}
		},
		"aadClientId": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Azure AD Client ID"
			}
		},
		"aadClientSecret": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Azure AD Client Secret"
			}
		},
		"rhnOrganizationID": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Organization ID"
			}
		},
		"rhnActivationKeyInfra": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Activation Key for Openshift Master/Infra/Broker entitlements"
			}
		},
		"rhnActivationKeyCNodes": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Red Hat Activation Key for OpenShift Compute Node entitlements"
			}
		},
		"sshPublicKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH public key for all VMs"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"keyVaultSecret": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Key Vault Secret Name that contains the Private Key"
			}
		},
		"defaultSubDomainType": {
			"type": "string",
			"defaultValue": "nipio",
			"allowedValues": [
				"nipio", "custom"
			],
			"metadata": {
				"description": "Default Subdomain type - nip.io or custom (defined in next parameter)"
			}
		},
		"defaultSubDomain": {
			"type": "string",
			"defaultValue": "contoso.com",
			"minLength": 1,
			"metadata": {
				"description": "Default Subdomain for application routing (Wildcard DNS) - must enter something even if you are using nip.io"
			}
		}
	},
	"variables": {
		"location": "[resourceGroup().location]",
		
		"apiVersionCompute": "2015-06-15",
		"apiVersionNetwork": "2016-03-30",
		"apiVersionStorage": "2015-06-15",
		"apiVersionStorage2": "2017-06-01",
		"apiVersionLinkTemplate": "2015-01-01",

		"namingInfix": "[toLower(parameters('openshiftClusterPrefix'))]",
		"openshiftBastionHostname": "[concat(variables('namingInfix'), 'b')]",
		"openshiftMasterHostname": "[concat(variables('namingInfix'), 'm')]",
		"openshiftInfraHostname": "[concat(variables('namingInfix'), 'i')]",
		"openshiftNodeHostname": "[concat(variables('namingInfix'), 'n')]",
		"openshiftInfraPublicHostname": "[concat(variables('openshiftInfraHostname'), 'p')]",
		"openshiftInfraRestrictedHostname": "[concat(variables('openshiftInfraHostname'), 'r')]",
		"openshiftInfraInternalHostname": "[concat(variables('openshiftInfraHostname'), 'i')]",		
		"openshiftTestNodeHostname": "[concat(variables('openshiftNodeHostname'), 't')]",
		"openshiftProdNodeHostname": "[concat(variables('openshiftNodeHostname'), 'p')]",
		
		"newStorageAccountMaster": "[concat(uniqueString(concat(resourceGroup().id, 'msa', '0')), 'msa')]",
		"newStorageAccountNode": "[concat(uniqueString(concat(resourceGroup().id, 'nsa', '1')), 'nsa')]",
		"newStorageAccountPersistentVolume1": "[concat(uniqueString(concat(resourceGroup().id, 'pv1sa', '2')), 'pv1sa')]",

		"addressPrefix": "10.203.0.0/16",
		"masterSubnetPrefix": "10.203.20.0/24",
		"infraSubnetPrefix": "10.203.70.0/24",
		"testnodeSubnetPrefix": "10.203.40.0/24",
		"prodnodeSubnetPrefix": "10.203.60.0/24",
		"bastionStaticPrivateIpAddress": "10.203.20.5",
		"infraInternalStaticPrivateIpAddress": "10.203.70.5",
		"virtualNetworkName": "openshiftvnet",
		"masterSubnetName": "mastersubnet",
		"infraSubnetName": "infrasubnet",
		"testnodeSubnetName": "testnodesubnet",
		"prodnodeSubnetName": "prodnodesubnet",
		"bastionPublicIp": "bastionpublicip",
		
		"masterLoadBalancerName": "[concat(variables('openshiftMasterHostname'), 'lb')]",
		"masterPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('openshiftMasterPublicIpDnsLabel'))]",
		"masterLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('masterLoadBalancerName'))]",
		"masterLbFrontEndConfigId": "[concat(variables('masterLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"masterLbBackendPoolId": "[concat(variables('masterLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"masterLb8443ProbeId": "[concat(variables('masterLbId'),'/probes/8443Probe')]",
		
		"infraPublicLoadBalancerName": "[concat(variables('openshiftInfraPublicHostname'), 'lb')]",
		"infraPublicPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('infraPublicLbPublicIpDnsLabel'))]",
		"infraPublicLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('infraPublicLoadBalancerName'))]",
		"infraPublicLbFrontEndConfigId": "[concat(variables('infraPublicLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"infraPublicLbBackendPoolId": "[concat(variables('infraPublicLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"infraPublicLbHttpProbeId": "[concat(variables('infraPublicLbId'),'/probes/httpProbe')]",
		"infraPublicLbHttpsProbeId": "[concat(variables('infraPublicLbId'),'/probes/httpsProbe')]",

		"infraRestrictedLoadBalancerName": "[concat(variables('openshiftInfraRestrictedHostname'), 'lb')]",
		"infraRestrictedPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('infraRestrictedLbPublicIpDnsLabel'))]",
		"infraRestrictedLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('infraRestrictedLoadBalancerName'))]",
		"infraRestrictedLbFrontEndConfigId": "[concat(variables('infraRestrictedLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"infraRestrictedLbBackendPoolId": "[concat(variables('infraRestrictedLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"infraRestrictedLbHttpProbeId": "[concat(variables('infraRestrictedLbId'),'/probes/httpProbe')]",
		"infraRestrictedLbHttpsProbeId": "[concat(variables('infraRestrictedLbId'),'/probes/httpsProbe')]",
		
		"osType": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7-RAW",
			"version": "latest"
		},
		"imageReference": "[variables('osType')]",

		"persistentVolume1Type": "Standard_LRS",

		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
		
		"bastionPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/bastionPrep.sh')]",
		"nodePrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/nodePrep.sh')]",
		"masterPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/masterPrep.sh')]",
		"bastionPrepScriptFileName": "bastionPrep.sh",
		"nodePrepScriptFileName": "nodePrep.sh",
		"masterPrepScriptFileName": "masterPrep.sh",
		"openshiftDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/openshiftdeploy.json')]",
		
		"vmSizesMap": {
			"Standard_A4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A5": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A6": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A7": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A8": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A9": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A10": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A11": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D1": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D3": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D11": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D12": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D13": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D14": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D1_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D2_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D3_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D4_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D5_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D11_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D12_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D13_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D14_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G1": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G3": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G5": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_DS1": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS3": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS4": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS11": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS12": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS13": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS14": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS1_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS2_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS3_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS4_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS5_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS11_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS12_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS13_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS14_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS15_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS1": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS3": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS4": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS5": {
				"storageAccountType": "Premium_LRS"
			}
		}
	},
	"resources": [
		{
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftBastionHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}					
				}]
			}
		}, {
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftMasterHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[reference(concat(variables('openshiftBastionHostname'), 'nic')).ipConfigurations[0].properties.privateIPAddress]",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowOpenShiftConsoleIn_all",
					"properties": {
						"description": "Allow OpenShift Console connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "8443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}, {
					"name": "allowCockpitIn_all",
					"properties": {
						"description": "Allow Cockpit connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "9090",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 400,
						"direction": "Inbound"
					}			
				}]
			}
		}, {
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftInfraHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[reference(concat(variables('openshiftBastionHostname'), 'nic')).ipConfigurations[0].properties.privateIPAddress]",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPSIn_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPIn_all",
					"properties": {
						"description": "Allow HTTP connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "80",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}, {
					"name": "allowCockpitIn_all",
					"properties": {
						"description": "Allow Cockpit connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "9090",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 400,
						"direction": "Inbound"
					}				
				}]
			}
		}, {
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftNodeHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "[reference(concat(variables('openshiftBastionHostname'), 'nic')).ipConfigurations[0].properties.privateIPAddress]",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPIn_all",
					"properties": {
						"description": "Allow HTTP connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "80",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}, {
					"name": "allowCockpitIn_all",
					"properties": {
						"description": "Allow Cockpit connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "9090",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 400,
						"direction": "Inbound"
					}				
				}]
			}
		}, {
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "VirtualNetwork"
			},
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [{
					"name": "[variables('masterSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('masterSubnetPrefix')]"
					}
				}, {
					"name": "[variables('infraSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('infraSubnetPrefix')]"
					}
				}, {	
					"name": "[variables('testnodeSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('testnodeSubnetPrefix')]"
					}
				}, {
					"name": "[variables('prodnodeSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('prodnodeSubnetPrefix')]"
					}	
				}]
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountMaster')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionStorage')]",
			"tags": {
				"displayName": "MasterStorageAccount"
			},
			"properties": {
				"accountType": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountNode')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionStorage')]",
			"tags": {
				"displayName": "NodeStorageAccount"
			},
			"properties": {
				"accountType": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountPersistentVolume1')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionStorage2')]",
			"kind": "Storage",
			"tags": {
				"displayName": "PersistentVolume1Storage"
			},
			"sku": {
				"name": "[variables('persistentVolume1Type')]"
			}				
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('bastionPublicIp')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftBastionPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Dynamic"
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('openshiftMasterPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('openshiftMasterPublicIpDnsLabel')]"
				}
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('infraPublicLbPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraPublicLBPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('infraPublicLbPublicIpDnsLabel')]"
				}
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('infraRestrictedLbPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraRestrictedLBPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('infraRestrictedLbPublicIpDnsLabel')]"
				}
			}
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "masteravailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "infrapublicavailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "infrarestrictedavailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}	
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "testnodeavailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "prodnodeavailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}	
		}, {
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('masterLoadBalancerName')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterLB"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('openshiftMasterPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('masterPublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "OpenShiftAdminConsole",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('masterLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('masterLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"loadDistribution": "SourceIP",
						"idleTimeoutInMinutes": 30,
						"frontendPort": 8443,
						"backendPort": 8443,
						"probe": {
							"id": "[variables('masterLb8443ProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "8443Probe",
					"properties": {
						"protocol": "Tcp",
						"port": 8443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}
		}, {
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('infraPublicLoadBalancerName')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraPublicLB"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('infraPublicLbPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('infraPublicPublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "OpenShiftRouterHTTP",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('infraPublicLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('infraPublicLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 80,
						"backendPort": 80,
						"probe": {
							"id": "[variables('infraPublicLbHttpProbeId')]"
						}
					}
				}, {
					"name": "OpenShiftRouterHTTPS",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('infraPublicLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('infraPublicLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 443,
						"backendPort": 443,
						"probe": {
							"id": "[variables('infraPublicLbHttpsProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "httpProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 80,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}, {
					"name": "httpsProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}
		}, {
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('infraRestrictedLoadBalancerName')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraRestrictedLB"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('infraRestrictedLbPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('infraRestrictedPublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "OpenShiftRouterHTTP",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('infraRestrictedLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('infraRestrictedLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 80,
						"backendPort": 80,
						"probe": {
							"id": "[variables('infraRestrictedLbHttpProbeId')]"
						}
					}
				}, {
					"name": "OpenShiftRouterHTTPS",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('infraRestrictedLbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('infraRestrictedLbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 443,
						"backendPort": 443,
						"probe": {
							"id": "[variables('infraRestrictedLbHttpsProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "httpProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 80,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}, {
					"name": "httpsProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}				
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftBastionHostname'), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftBastionNetworkInterface"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftBastionHostname'), '-nsg')]"
			],
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftBastionHostname'), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Static",
						"privateIPAddress": "[variables('bastionStaticPrivateIpAddress')]",
						"publicIPAddress": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/publicIPAddresses/', variables('bastionPublicIp'))]"
						},
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftBastionHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterNetworkInterface"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftMasterHostname'), '-nsg')]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftBastionHostname'), 'nic')]"
			],
			"copy": {
				"name": "masterNicLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}]
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftMasterHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftInfraPublicHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraPublicNetworkInterfaces"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('infraPublicLoadBalancerName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftInfraInternalHostname'), '0', 'nic')]"
			],
			"copy": {
				"name": "infraPublicNicLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftInfraPublicHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('infraSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('infraPublicLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}]
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftInfraRestrictedHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraRestrictedNetworkInterfaces"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('infraRestrictedLoadBalancerName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftInfraInternalHostname'), '0', 'nic')]"
			],
			"copy": {
				"name": "infraRestrictedNicLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftInfraRestrictedHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('infraSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('infraRestrictedLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}]
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftInfraInternalHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraInternalNetworkInterfaces"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]"
			],
			"copy": {
				"name": "infraInternalNicLoop",
				"count": 1
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftInfraInternalHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Static",
						"privateIPAddress": "[variables('infraInternalStaticPrivateIpAddress')]",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('infraSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftTestNodeHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftNodeNetworkInterfaces"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftNodeHostname'), '-nsg')]"
			],
			"copy": {
				"name": "testnodeNicLoop",
				"count": "[parameters('testnodeInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftTestNodeHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('testnodeSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftNodeHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftProdNodeHostname'), copyIndex(), 'nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftProdNodeNetworkInterfaces"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftNodeHostname'), '-nsg')]"
			],
			"copy": {
				"name": "prodnodeNicLoop",
				"count": "[parameters('prodnodeInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftProdNodeHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('prodnodeSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftNodeHostname'), '-nsg'))]"
				}
			}	
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[variables('openshiftBastionHostname')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftBastionVirtualMachine"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftBastionHostname'), 'nic')]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('masterVmSize')]"
				},
				"osProfile": {
					"computerName": "[variables('openshiftBastionHostname')]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftBastionHostname'), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftBastionHostname'), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					}
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('openshiftBastionHostname'), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftMasterVirtualMachines"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftMasterHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "masterVmLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'masteravailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('masterVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('openshiftMasterHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftMasterHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftMasterHostname'), copyIndex(), '-docker-pool.vhd')]"
						},
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('openshiftMasterHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('openshiftInfraPublicHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftInfraPublicNodes"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftInfraPublicHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "infraPublicLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'infrapublicavailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('infraVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('openshiftInfraPublicHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftInfraPublicHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftInfraPublicHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('openshiftInfraPublicHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftInfraPublicHostname'), copyIndex(), 'docker-pool.vhd')]"
						},
                       	"createOption": "Empty"
                    }]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('openshiftInfraPublicHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('openshiftInfraRestrictedHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftInfraRestrictedNodes"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftInfraRestrictedHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "infraRestrictedLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'infrarestrictedavailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('infraVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('openshiftInfraRestrictedHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftInfraRestrictedHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftInfraRestrictedHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('openshiftInfraRestrictedHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftInfraRestrictedHostname'), copyIndex(), 'docker-pool.vhd')]"
						},
							"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('openshiftInfraRestrictedHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('openshiftInfraInternalHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftInfraInternalNodes"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftInfraInternalHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "infraInternalLoop",
				"count": 1
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'infrarestrictedavailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('infraVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('openshiftInfraInternalHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftInfraInternalHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftInfraInternalHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('openshiftInfraInternalHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftInfraInternalHostname'), copyIndex(), 'docker-pool.vhd')]"
						},
							"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('openshiftInfraInternalHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}						
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('openshiftTestNodeHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftTestNodes"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountNode'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftTestNodeHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "testnodeLoop",
				"count": "[parameters('testnodeInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'testnodeavailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('nodeVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('openshiftTestNodeHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftTestNodeHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountNode')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftTestNodeHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('openshiftTestNodeHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountNode')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftTestNodeHostname'), copyIndex(), '-docker-pool.vhd')]"
						},
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('openshiftTestNodeHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('openshiftProdNodeHostname'), '-', copyIndex())]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftProdNodes"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountNode'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('openshiftProdNodeHostname'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "prodnodeLoop",
				"count": "[parameters('prodnodeInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'prodnodeavailabilityset')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('nodeVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('openshiftProdNodeHostname'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('openshiftProdNodeHostname'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountNode')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftProdNodeHostname'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('openshiftProdNodeHostname'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "[parameters('dataDiskSize')]",
						"lun": 0,
						"vhd": {
							"uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountNode')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('openshiftProdNodeHostname'), copyIndex(), '-docker-pool.vhd')]"
						},
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('openshiftProdNodeHostname'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftBastionHostname'), '/deployOpenShift')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepBastion"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftBastionHostname'))]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('bastionPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('bastionPrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyInfra'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '/prepMasters')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepMaster"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftMasterHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "masterPrepLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('masterPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('masterPrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyInfra'), ' ', parameters('adminUsername'), ' ', variables('newStorageAccountPersistentVolume1'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftInfraPublicHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepInfra"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftInfraPublicHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "infraPublicPrepLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyInfra'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftInfraRestrictedHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepRestrictedInfra"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftInfraRestrictedHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "infraRestrictedPrepLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyInfra'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftInfraInternalHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepInternalInfra"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftInfraInternalHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "infraInternalPrepLoop",
				"count": 1
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyInfra'))]"
				}
			}		
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftTestNodeHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepTestNodes"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftTestNodeHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "testnodePrepLoop",
				"count": "[parameters('testnodeInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyCNodes'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftProdNodeHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepProdNodes"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('openshiftProdNodeHostname'), '-', copyIndex())]"
			],
			"copy": {
				"name": "prodnodePrepLoop",
				"count": "[parameters('prodnodeInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'), ' ', parameters('rhnOrganizationID'), ' ', parameters('rhnActivationKeyCNodes'))]"
				}
			}
		}, {
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"masterPrepLoop",
				"infraPublicPrepLoop",
				"infraRestrictedPrepLoop",
				"infraInternalPrepLoop",
				"testnodePrepLoop",
				"prodnodePrepLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"openshiftBastionHostname": {
						"value": "[variables('openshiftBastionHostname')]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"openshiftMasterPublicIpFqdn": {
						"value": "[reference(parameters('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"openshiftMasterPublicIpAddress": {
						"value": "[reference(parameters('openshiftMasterPublicIpDnsLabel')).ipAddress]"
					},
					"openshiftInfraPublicHostname": {
						"value": "[variables('openshiftInfraPublicHostname')]"
					},
					"openshiftInfraRestrictedHostname": {
						"value": "[variables('openshiftInfraRestrictedHostname')]"
					},
					"openshiftTestNodeHostname": {
						"value": "[variables('openshiftTestNodeHostname')]"
					},
					"openshiftProdNodeHostname": {
						"value": "[variables('openshiftProdNodeHostname')]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"infraInstanceCount": {
						"value": "[parameters('infraInstanceCount')]"
					},
					"testnodeInstanceCount": {
						"value": "[parameters('testnodeInstanceCount')]"
					},
					"prodnodeInstanceCount": {
						"value": "[parameters('prodnodeInstanceCount')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"openshiftPassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"aadClientId": {
						"value": "[parameters('aadClientId')]"
					},
					"aadClientSecret": {
						"value": "[parameters('aadClientSecret')]"
					},
					"nipioDomain": {
						"value": "[concat(reference(parameters('infraPublicLbPublicIpDnsLabel')).ipAddress, '.nip.io')]"
					},
					"customDomain": {
						"value": "[parameters('defaultSubDomain')]"
					},
					"subDomainChosen": {
						"value": "[concat(parameters('defaultSubDomainType'), 'Domain')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[parameters('keyVaultSecret')]"
						}
					}
				}
			}
		}
	],
	"outputs": {
		"openshiftConsoleUrl": {
			"type": "string",
			"value": "[concat('https://', reference(parameters('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn, ':8443/console')]"
		},
		"openshiftInfraPublicLoadBalancerFQDN": {
			"type": "string",
			"value": "[reference(parameters('infraPublicLbPublicIpDnsLabel')).dnsSettings.fqdn]"
		},
		"openshiftInfraRestrictedLoadBalancerFQDN": {
			"type": "string",
			"value": "[reference(parameters('infraRestrictedLbPublicIpDnsLabel')).dnsSettings.fqdn]"

		}
	}
}
